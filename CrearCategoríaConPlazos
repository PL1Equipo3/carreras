import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JToolBar;
import javax.swing.ListModel;
import javax.swing.JTabbedPane;
import java.awt.FlowLayout;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.SpinnerListModel;
import java.awt.CardLayout;
import javax.swing.JScrollPane;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.AbstractListModel;
import javax.swing.SpinnerNumberModel;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.awt.Color;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import java.awt.event.ContainerAdapter;
import java.awt.event.ContainerEvent;

public class CrearCompetición extends JFrame {

	private JPanel contentPane;
	private JTextField tfNombre;
	private JTextField tfLugar;
	private JLabel lblLaCompeticinYa;
	private JLabel lblFechaIncorrecta;
	private JLabel lblCompeticinRegistrada;
	private JButton btnAceptarComp;
	private CrearCategoria VAñadir;
	private CreacionPlazos Plazos;
	public static  DefaultListModel model;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					CrearCompetición frame = new CrearCompetición();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public CrearCompetición() {
		try {

			//Conexión a la BD
			Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
			//Ruta absoluta o relativa como parÃ¡metro de getConnection
			Connection conn=DriverManager.getConnection("jdbc:ucanaccess://Carreras 2ª versión.accdb");
			final Statement s = conn.createStatement();

			setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			setBounds(100, 100, 499, 372);
			contentPane = new JPanel();
			contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
			setContentPane(contentPane);
			contentPane.setLayout(new CardLayout(0, 0));
			VAñadir=new CrearCategoria(this);
			Plazos=new CreacionPlazos(this);

			final JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
			contentPane.add(tabbedPane, "name_841985683922062");

			final JPanel panelCrearComp = new JPanel();
			tabbedPane.addTab("Crear Competición", null, panelCrearComp, null);
			panelCrearComp.setLayout(null);

			final JPanel panelAñadirCateg = new JPanel();
			//tabbedPane.addTab("Añadir Categorías", null, panelAñadirCateg, null);
			//panelAñadirCateg.setLayout(null);

			JLabel lblCrear = new JLabel("Crear una competición: ");
			lblCrear.setBounds(10, 11, 140, 20);
			panelCrearComp.add(lblCrear);

			//NOMBRE:
			JLabel lblNombre = new JLabel("Nombre: ");
			lblNombre.setBounds(10, 42, 58, 14);
			panelCrearComp.add(lblNombre);

			tfNombre = new JTextField();
			tfNombre.addKeyListener(new KeyAdapter() {
				@Override
				public void keyReleased(KeyEvent arg0) {
					lblCompeticinRegistrada.setText("");
					if(tfNombre.getText().length() == 0 || tfLugar.getText().length() == 0)
						btnAceptarComp.setEnabled(false);
					else
					{
						btnAceptarComp.setEnabled(true);
					}
				}
			});
			tfNombre.setColumns(10);
			tfNombre.setBounds(100, 39, 153, 20);
			panelCrearComp.add(tfNombre);

			//EDICIÓN:
			JLabel lblEdición = new JLabel("Edición: ");
			lblEdición.setBounds(10, 73, 58, 14);
			panelCrearComp.add(lblEdición);

			final JSpinner spEdición = new JSpinner();
			spEdición.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent arg0) {
					lblCompeticinRegistrada.setText("");
				}
			});
			spEdición.setModel(new SpinnerNumberModel(new Integer(1), new Integer(1), null, new Integer(1)));
			spEdición.setBounds(100, 70, 58, 20);
			panelCrearComp.add(spEdición);

			//FECHA:
			JLabel lblFecha = new JLabel("Fecha: ");
			lblFecha.setBounds(10, 117, 46, 14);
			panelCrearComp.add(lblFecha);

			JLabel lblDía = new JLabel("Día");
			lblDía.setBounds(66, 101, 46, 14);
			panelCrearComp.add(lblDía);

			JLabel lblMes = new JLabel("Mes");
			lblMes.setBounds(134, 101, 46, 14);
			panelCrearComp.add(lblMes);

			JLabel lblAño = new JLabel("Año");
			lblAño.setBounds(207, 101, 46, 14);
			panelCrearComp.add(lblAño);

			//ComboBoxes
			final JComboBox cbDía = new JComboBox();
			final JComboBox cbMes = new JComboBox();
			final JComboBox cbAño = new JComboBox();

			//Vectores para los días
			final String[] Dias31 = new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"};
			final String[] Dias30 = new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"};
			final String[] Dias28 = new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"};
			final String[] Dias29 = new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28"};


			//AÑO
			cbAño.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					if(cbMes.getSelectedItem().equals("2")){
						GregorianCalendar calendario = new GregorianCalendar();
						int año = Integer.parseInt((String) cbAño.getSelectedItem());
						if(calendario.isLeapYear( año ) ){
							cbDía.setModel(new DefaultComboBoxModel(Dias28));
						}
						else{
							cbDía.setModel(new DefaultComboBoxModel(Dias29));
						}
					}
				}
			});
			cbAño.setModel(new DefaultComboBoxModel(new String[] {"2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030"}));
			cbAño.setBounds(203, 114, 63, 20);
			panelCrearComp.add(cbAño);	

			//MES
			cbMes.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					if(cbMes.getSelectedItem().equals("1") || cbMes.getSelectedItem().equals("3") || cbMes.getSelectedItem().equals("5") || cbMes.getSelectedItem().equals("7") || cbMes.getSelectedItem().equals("8") || cbMes.getSelectedItem().equals("10") || cbMes.getSelectedItem().equals("12")){
						cbDía.setModel(new DefaultComboBoxModel(Dias31));
					}
					if(cbMes.getSelectedItem().equals("4") || cbMes.getSelectedItem().equals("6") || cbMes.getSelectedItem().equals("9") || cbMes.getSelectedItem().equals("11")){
						cbDía.setModel(new DefaultComboBoxModel(Dias30));
					}
					if(cbMes.getSelectedItem().equals("2")){
						GregorianCalendar calendario = new GregorianCalendar();
						int año = Integer.parseInt((String) cbAño.getSelectedItem());
						if(calendario.isLeapYear( año ) ){
							cbDía.setModel(new DefaultComboBoxModel(Dias28));
						}
						else{
							cbDía.setModel(new DefaultComboBoxModel(Dias29));
						}
					}
				}
			});
			cbMes.setModel(new DefaultComboBoxModel(new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"}));
			cbMes.setBounds(133, 114, 47, 20);
			panelCrearComp.add(cbMes);	

			//DÍA
			if(cbMes.getSelectedItem().equals("1") || cbMes.getSelectedItem().equals("3") || cbMes.getSelectedItem().equals("5") || cbMes.getSelectedItem().equals("7") || cbMes.getSelectedItem().equals("8") || cbMes.getSelectedItem().equals("10") || cbMes.getSelectedItem().equals("12")){
				cbDía.setModel(new DefaultComboBoxModel(Dias31));
			}
			if(cbMes.getSelectedItem().equals("4") || cbMes.getSelectedItem().equals("6") || cbMes.getSelectedItem().equals("9") || cbMes.getSelectedItem().equals("11")){
				cbDía.setModel(new DefaultComboBoxModel(Dias30));
			}
			if(cbMes.getSelectedItem().equals("2")){
				GregorianCalendar calendario = new GregorianCalendar();
				int año = Integer.parseInt((String) cbAño.getSelectedItem());
				if(calendario.isLeapYear( año ) ){
					cbDía.setModel(new DefaultComboBoxModel(Dias28));
				}
				else{
					cbDía.setModel(new DefaultComboBoxModel(Dias29));
				}
			}
			cbDía.setBounds(66, 114, 47, 20);
			panelCrearComp.add(cbDía);

			//NÚMERO DE PARTICIPANTES:
			JLabel lblParticipantes = new JLabel("Número de participantes: ");
			lblParticipantes.setBounds(10, 152, 148, 14);
			panelCrearComp.add(lblParticipantes);

			final JSpinner spParticipantes = new JSpinner();
			spParticipantes.setModel(new SpinnerNumberModel(new Integer(1), new Integer(1), null, new Integer(1)));
			spParticipantes.setBounds(167, 149, 63, 20);
			panelCrearComp.add(spParticipantes);

			//TIPO:
			JLabel lblTipo = new JLabel("Tipo de carrera: ");
			lblTipo.setBounds(10, 190, 96, 14);
			panelCrearComp.add(lblTipo);

			final JComboBox cpTipo = new JComboBox();
			cpTipo.setModel(new DefaultComboBoxModel(new String[] {"Montaña", "Carrera Popular"}));
			cpTipo.setBounds(116, 187, 114, 20);
			panelCrearComp.add(cpTipo);

			//LUGAR:
			JLabel lblLugar = new JLabel("Lugar: ");
			lblLugar.setBounds(10, 228, 46, 14);
			panelCrearComp.add(lblLugar);

			tfLugar = new JTextField();
			tfLugar.addKeyListener(new KeyAdapter() {
				@Override
				public void keyReleased(KeyEvent e) {
					if(tfNombre.getText().length() == 0 || tfLugar.getText().length() == 0)
						btnAceptarComp.setEnabled(false);
					else
					{
						btnAceptarComp.setEnabled(true);
					}
				}
			});
			tfLugar.setColumns(10);
			tfLugar.setBounds(77, 225, 153, 20);
			panelCrearComp.add(tfLugar);

			//DISTANCIA:
			JLabel lblDistancia = new JLabel("Distancia: ");
			lblDistancia.setBounds(10, 256, 68, 14);
			panelCrearComp.add(lblDistancia);

			final JSpinner spDistancia = new JSpinner();
			spDistancia.setModel(new SpinnerNumberModel(new Integer(1), new Integer(1), null, new Integer(1)));
			spDistancia.setBounds(87, 253, 63, 20);
			panelCrearComp.add(spDistancia);

			JLabel lblKm = new JLabel("Km");
			lblKm.setBounds(167, 256, 46, 14);
			panelCrearComp.add(lblKm);

			//MENSAJES DE ERROR Y COMPROBACIÓN:
			lblLaCompeticinYa = new JLabel("");
			lblLaCompeticinYa.setForeground(Color.RED);
			lblLaCompeticinYa.setBounds(294, 42, 164, 14);
			panelCrearComp.add(lblLaCompeticinYa);

			lblFechaIncorrecta = new JLabel("");
			lblFechaIncorrecta.setForeground(Color.RED);
			lblFechaIncorrecta.setBounds(294, 117, 153, 14);
			panelCrearComp.add(lblFechaIncorrecta);

			lblCompeticinRegistrada = new JLabel("");
			lblCompeticinRegistrada.setForeground(Color.GREEN);
			lblCompeticinRegistrada.setBounds(294, 242, 164, 14);
			panelCrearComp.add(lblCompeticinRegistrada);

			//BOTÓN DE ACEPTAR
			btnAceptarComp = new JButton("Aceptar");
			btnAceptarComp.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					try {
						//Comprobamos si la competición seleccionada ya existe
						s.execute("SELECT Id_competición FROM competición WHERE Id_competición = '"+tfNombre.getText()+"-"+spEdición.getValue()+"'");
						ResultSet competicion = s.getResultSet();
						if(competicion.next()){
							lblLaCompeticinYa.setText("La competición ya existe");
							lblFechaIncorrecta.setText("");
							lblCompeticinRegistrada.setText("");
						}
						else{
							//Conseguimos la fecha actual a partir de la hora del sistema
							java.util.Date fechaActual = (Calendar.getInstance()).getTime();

							//Conseguimos la fecha de la competición
							String fecha = cbAño.getSelectedItem().toString() + "-" + cbMes.getSelectedItem().toString() + "-" + cbDía.getSelectedItem().toString();
							//Formateador para dar el formato que reguiere sql
							SimpleDateFormat formateador = new SimpleDateFormat("yyy-MM-dd");
							Date fechaComp=formateador.parse(fecha);

							//Pasar las fechas a tipo java.sql.Date para poder compararlas
							java.sql.Date fechaA = new java.sql.Date(fechaActual.getTime());
							java.sql.Date fechaC = new java.sql.Date(fechaComp.getTime());
							//Comprobar si la fecha de la competición es posterior a la actual.

							if ( fechaC.before(fechaA) ) {
								lblFechaIncorrecta.setText("Fecha incorrecta");
								lblLaCompeticinYa.setText("");
								lblCompeticinRegistrada.setText("");
							}
							//Si todo es correcto introducir la competición en la base de datos
							else{
								lblCompeticinRegistrada.setText("Competición registrada");
								lblLaCompeticinYa.setText("");
								lblFechaIncorrecta.setText("");

								fecha="#"+fecha+"#";
								String nuevaComp = "INSERT INTO Competición VALUES ( "
										+ "'"+tfNombre.getText()+"-"+spEdición.getValue()+"', "  //Id_competición
										+ "'"+tfNombre.getText()+"', "   		   		   		 //Nombre
										+ "'"+spEdición.getValue()+"ª', "   					 //Edición
										+ (int)spParticipantes.getValue()+", "   	 			 //Máximo participantes
										+ fecha+", "     	   									 //Fecha
										+ "'"+cpTipo.getSelectedItem()+"', "   					 //Tipo
										+ "'"+tfLugar.getText()+"', "  						     //Lugar
										+ "'"+spDistancia.getValue()+"Km' )";  	              	 //Distancia
								s.execute(nuevaComp);
								tabbedPane.remove(0);
								tabbedPane.addTab("Añadir Categorías", null, panelAñadirCateg, null);
								panelAñadirCateg.setLayout(null);
							}
						}
					} catch (SQLException | ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			});
			btnAceptarComp.setEnabled(false);
			btnAceptarComp.setBounds(358, 261, 89, 23);
			panelCrearComp.add(btnAceptarComp);










			//Modelo para la lista
			model = new DefaultListModel();


			//Label de aviso
			final JLabel lblCategorasAadidasCorrectamente = new JLabel("");
			lblCategorasAadidasCorrectamente.setForeground(Color.GREEN);
			lblCategorasAadidasCorrectamente.setBounds(263, 236, 210, 14);
			panelAñadirCateg.add(lblCategorasAadidasCorrectamente);

			//BOTÓN DE ACEPTAR
			final JButton btnAceptarCateg = new JButton("Aceptar");
			btnAceptarCateg.setBounds(369, 261, 89, 23);
			panelAñadirCateg.add(btnAceptarCateg);
			btnAceptarCateg.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {	
					String[] Categoría;
					String orden;
					ResultSet ID;
					String delimitadores = "[ -]+";
					String añoFin;

					for (int i=0; i<model.size(); i++){
						//Partimos la categoría para poder insertar en la base de datos
						Categoría = model.getElementAt(i).toString().split(delimitadores);
						if(Categoría[2].equals("Inf")){
							añoFin = "null";
						}
						else{
							añoFin = Categoría[2];
						}
						orden = "SELECT Id_categoría FROM Categoría WHERE( Nombre='"+Categoría[0]+"' AND [Año inicio]= "+Categoría[1]+" AND [Año fin]= "+añoFin+" AND Sexo= '"+Categoría[3]+"' AND Tipo= '"+cpTipo.getSelectedItem()+"')";
						try {
							s.execute(orden);
							ID = s.getResultSet();
							if(ID.next()){
								orden = "INSERT INTO [Categorías de la competición] VALUES ( '"+ tfNombre.getText()+"-"+spEdición.getValue()+"', "
										+ID.getString(1)+")";
								s.execute(orden);
							}
							else{
								orden = "INSERT INTO Categoría VALUES ( 1, ";
								for(int j=0; j<Categoría.length; j++){
									switch(j){
									case 0 : //Nombre
										orden = orden + "'"+Categoría[j]+"', ";
										break;
									case 1 : //Año inicio
										orden = orden +Categoría[j]+", ";
										break;
									case 2 : //Año fin
										if(Categoría[j].equals("Inf")){
											orden = orden + "null , ";
										}
										else{
											orden = orden +Categoría[j]+", ";
										}
										break;
									case 3 : //Sexo
										orden = orden + "'"+Categoría[j]+"', "; 
										break;    

									}
								}
								orden = orden + "'"+cpTipo.getSelectedItem()+"' )"; //Tipo


								s.execute(orden); 
								orden = "SELECT TOP 1 Id_categoría FROM Categoría ORDER BY Id_categoría DESC";
								s.execute(orden);
								ResultSet r = s.getResultSet();
								r.next();
								orden = "INSERT INTO [Categorías de la competición] VALUES ( '"+ tfNombre.getText()+"-"+spEdición.getValue()+"', "
										+r.getLong(1)+")";
								s.execute(orden);
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
					lblCategorasAadidasCorrectamente.setText("Categorías añadidas correctamente");
				}
			});;
			//Categorías por defecto
			model.addElement("Cadete 15-17 Masculino");
			model.addElement("Cadete 15-17 Femenino");
			model.addElement("Júnior 18-20 Masculino");
			model.addElement("Júnior 18-20 Femenino");
			model.addElement("Promesa 21-23 Masculino");
			model.addElement("Promesa 21-23 Femenino");
			model.addElement("Senior 24-44 Masculino");
			model.addElement("Senior 24-39 Femenino");
			model.addElement("Veterana 45-Inf Masculino");
			model.addElement("Veterana 40-Inf Femenino");

			JLabel lblCategorias = new JLabel("Categorias de tu competición:");
			lblCategorias.setBounds(10, 14, 195, 14);
			panelAñadirCateg.add(lblCategorias);

			//BOTÓN DE AÑADIR
			JButton btnAñadir = new JButton("Añadir");
			btnAñadir.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					VAñadir.setVisible(true);
					lblCategorasAadidasCorrectamente.setText("");
				}
			});
			btnAñadir.setBounds(249, 36, 89, 23);
			panelAñadirCateg.add(btnAñadir);

			//BOTÓN DE ELIMINAR
			final JList listCategorías = new JList();
			JButton btnEliminar = new JButton("Eliminar");
			btnEliminar.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					int selected = listCategorías.getSelectedIndex();
					if(selected != -1 && model.getSize() != 0){
						model.remove(selected);
						lblCategorasAadidasCorrectamente.setText("");
					}
				}
			});
			btnEliminar.setBounds(249, 88, 89, 23);
			panelAñadirCateg.add(btnEliminar);

			JScrollPane scrollPane = new JScrollPane();
			scrollPane.setBounds(20, 39, 195, 191);
			panelAñadirCateg.add(scrollPane);

			//LISTA DE CATEGORÍAS

			scrollPane.setViewportView(listCategorías);
			listCategorías.addListSelectionListener(new ListSelectionListener() {
				public void valueChanged(ListSelectionEvent arg0) {
					if (model.isEmpty()){
						btnAceptarCateg.setEnabled(false);
					}
					else{
						btnAceptarCateg.setEnabled(true);
					}
				}
			});
			listCategorías.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			listCategorías.setModel(model);

      //BOTON PLAZOS
			JButton bPlazos = new JButton("Plazos");
			bPlazos.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					Plazos.setVisible(true);
				}
			});
			bPlazos.setBounds(249, 207, 89, 23);
			panelAñadirCateg.add(bPlazos);

		}
		catch(Exception ex){
			ex.printStackTrace();
		}
	}
}
